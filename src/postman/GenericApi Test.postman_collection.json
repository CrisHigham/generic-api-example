{
	"info": {
		"_postman_id": "05770980-1eaa-4293-b3db-f14a6de48809",
		"name": "GenericApi Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11185861"
	},
	"item": [
		{
			"name": "Auth: Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/ping",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth: Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Create User\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"Peter\",\r\n    \"lastName\":\"Parker\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth: Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth: Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth: Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"spiderman@gmail.com\",\r\n    \"cellphone\":\"0123456789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth: Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 403;\r",
							"\r",
							"pm.test(\"Auth Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Test Api Ping\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"version: \" + responseJson.version);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/ping",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Create User 1\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    pm.environment.set(\"userId1\", responseJson.id);\r",
							"    console.log(\"userId 1 is set to: \" + pm.environment.get(\"userId1\"));\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"Peter\",\r\n    \"lastName\":\"Parker\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Excluded Fields Safe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Excluded fields: Basic request valid\", function(){\r",
							"    pm.response.to.have.status(testCode);\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(responseJson).to.not.have.property(\"password\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Get User 1\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(responseJson.id).to.eql(parseInt(pm.environment.get(\"userId1\")));\r",
							"    pm.expect(responseJson.firstName).to.eql(\"Peter\");\r",
							"    pm.expect(responseJson.lastName).to.eql(\"Parker\");\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"User id: \" + responseJson.id);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Create User 2\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    pm.environment.set(\"userId2\", responseJson.id);\r",
							"    console.log(\"userId 2 is set to: \" + pm.environment.get(\"userId2\"));\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"Bruce\",\r\n    \"lastName\":\"Wayne\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Get All Users\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(Array.isArray(responseJson)).to.be.true;;\r",
							"    pm.expect(responseJson.length).to.eql(2);\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"No of records: \" + responseJson.length);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Get User 1\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(responseJson.email).to.eql(\"spiderman@gmail.com\");\r",
							"    pm.expect(responseJson.cellphone).to.eql(\"0123456789\");\r",
							"})\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"User updated\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"spiderman@gmail.com\",\r\n    \"cellphone\":\"0123456789\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Delete User 1\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"console.log(responseJson);\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"User 1 deleted\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId1}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let testCode = 200;\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Delete User 2\", function(){\r",
							"    pm.response.to.have.status(testCode)\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"console.log(responseJson);\r",
							"\r",
							"if (pm.response.code != testCode){\r",
							"    console.log(responseJson);\r",
							"    pm.execution.setNextRequest(null);\r",
							"} else {\r",
							"    console.log(\"User 2 deleted\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{secure}}{{server}}{{base}}/test-user/{{userId2}}",
					"host": [
						"{{secure}}{{server}}{{base}}"
					],
					"path": [
						"test-user",
						"{{userId2}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let TheEnvironment = 1;      // 0 - mock, 1 - local , 2 - staging, 3 - production\r",
					"\r",
					"let GENERIC_API_BASE_URL = \"/api-example\"\r",
					"let token = \"EXAMPLE\";\r",
					"\r",
					"switch(token){\r",
					"    case \"EXAMPLE\":\r",
					"        pm.environment.set(\"token\", \"ABCDEF\");\r",
					"        break;\r",
					"}\r",
					"\r",
					"switch(TheEnvironment){\r",
					"    case 1:\r",
					"        // localhost\r",
					"        pm.environment.set(\"secure\", \"http://\")\r",
					"        pm.environment.set(\"server\", \"127.0.0.1:7145\");\r",
					"        pm.environment.set(\"base\", GENERIC_API_BASE_URL);\r",
					"        break;\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}